from flask import Flask, render_template, request, jsonify, url_for, send_from_directory
import os
from werkzeug.utils import secure_filename
from config import Config
from model.DogBreedDetector import DogBreedDetector
import logging
import gdown


def download_model():
    model_path = "model/final_model.keras"
    if not os.path.exists(model_path):
        print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ Google Drive...")
        file_id = "1CpLyj-vzXyA8WhStQHRib-lbBVgS0Yn_"
        url = f"https://drive.google.com/uc?id={file_id}"
        os.makedirs("model", exist_ok=True)
        gdown.download(url, model_path, quiet=False)
    else:
        print("‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")


app = Flask(__name__)
app.config.from_object(Config)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

logging.basicConfig(level=logging.DEBUG)

try:
    download_model()
    detector = DogBreedDetector()
except Exception as e:
    raise RuntimeError(f"Model initialization failed: {str(e)}")


def allowed_file(filename):
    return '.' in filename and \
        filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']


@app.route('/')
def home():
    return render_template('index.html',
                           js_url=url_for('static', filename='main.js'),
                           css_url=url_for('static', filename='styles.css'))


@app.route('/uploads/<filename>')
def uploaded_file(filename):
    """GET –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)


@app.route('/detect', methods=['GET', 'POST'])
def detect():
    if request.method == 'GET':
        # –ü—Ä–∏–º–µ—Ä GET –∑–∞–ø—Ä–æ—Å–∞ - –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ñ–æ—Ä–º—É –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        return jsonify({
            'message': 'Send POST request with image file to detect breed',
            'allowed_extensions': app.config['ALLOWED_EXTENSIONS']
        })

    # POST –æ–±—Ä–∞–±–æ—Ç–∫–∞
    try:
        if 'file' not in request.files:
            return jsonify({'error': 'No file uploaded'}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': 'No selected file'}), 400

        if not allowed_file(file.filename):
            return jsonify({'error': 'Invalid file type'}), 400

        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        if not os.path.exists(filepath):
            return jsonify({'error': 'File save failed'}), 500

        result = detector.predict_breed(filepath)

        # –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        result['image_url'] = url_for('uploaded_file', filename=filename, _external=True)

        # –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ GET
        # os.remove(filepath)

        return jsonify(result)

    except Exception as e:
        app.logger.error(f"Error: {str(e)}", exc_info=True)
        return jsonify({'error': str(e)}), 500


@app.route('/clear_uploads', methods=['POST'])
def clear_uploads():
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    try:
        for filename in os.listdir(app.config['UPLOAD_FOLDER']):
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            if os.path.isfile(file_path):
                os.unlink(file_path)
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == "__main__":
    app.run(host='0.0.0.0')